addpath(genpath('functions/'));

scale_factor = 0.5;

%% Read the data
% Dataset contains only images wich vertices are found correctly
T = readtable('../data/shapes.csv', 'HeaderLines', 0);
images_list = T{:, 1};
labels = T{:, 2};

n_elements = length(images_list);
ratios = zeros(n_elements, 1);

%% Process all images => process_images = true
process_images = false;

%% Process all images
if (process_images)
    tic
    parfor i = 1:length(images_list) 
        img_path = '../images/original/'+string(images_list{i});
        [~, scaled_image, target_image] = read_and_manipulate(img_path, scale_factor, @rgb2ycbcr, 3);
        canny_edge = image_to_edge(target_image);
        bw = canny2binary(canny_edge);
        vertices90 = find_vertices_90(bw);
        vertices45 = find_vertices_45(bw);
        best_vertices = decide_best_vertices(vertices45, vertices90);

        edge1 = best_vertices(1).value - best_vertices(2).value;
        edge2 = best_vertices(3).value - best_vertices(2).value;
        norm1 = norm(edge1);
        norm2 = norm(edge2);
        ratios(i) = min(norm1, norm2) / max(norm1, norm2);

    end
    toc

    save('../data/edges_ratio.mat', 'ratios');
end

%% Load data
load('../data/edges_ratio.mat');

%% Plot results
figure(1);
subplot(1,1,1);
histogram(ratios, 25);
title("Edges ratio");

%% Evaluate statistics
sum_ratios_rectangles = 0;
num_recatngles = 0;

%% Average
sum_ratios_squares = 0;
num_squares = 0;

for i = 1:length(images_list)
    if labels{i} == "square"
        sum_ratios_squares = sum_ratios_squares + ratios(i);
        num_squares = num_squares + 1;
    else
        sum_ratios_rectangles = sum_ratios_rectangles + ratios(i);
        num_recatngles = num_recatngles + 1;
    end
end

mu_ratio_squares    = sum_ratios_squares    / num_squares;
mu_ratio_rectangles = sum_ratios_rectangles / num_recatngles;


%% Standard deviation
varince_ratio_squares = 0;
varince_ratio_rectangles = 0;

for i = 1:length(images_list)
    if labels{i} == "square"
        varince_ratio_squares = ...
            varince_ratio_squares + (ratios(i) - mu_ratio_squares) ^ 2;
    else
        varince_ratio_rectangles = ...
            varince_ratio_rectangles + (ratios(i) - mu_ratio_rectangles) ^ 2; 
    end
end

std_ratio_squares    = sqrt(varince_ratio_squares    / num_squares);
std_ratio_rectangles = sqrt(varince_ratio_rectangles / num_recatngles);

fisher_criterion = ...
    ((mu_ratio_rectangles - mu_ratio_squares) ^ 2) / ...
    (std_ratio_rectangles ^ 2 + std_ratio_squares);

%% Show results
disp("Mean ratio squares    = " + mu_ratio_squares);
disp("Std ratio squares     = " + std_ratio_squares);
disp("--------");
disp("Mean ratio rectangles = " + mu_ratio_rectangles);
disp("Std ratio rectangles  = " + std_ratio_rectangles);
disp("--------");
disp("Best threshold using Fisher Criterion = " + fisher_criterion);

