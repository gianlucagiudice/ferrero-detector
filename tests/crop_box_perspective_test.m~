addpath(genpath('../functions/'));

%% Get list of images
images_list = readlist('../data/images.list');
scaleFactor = 0.5;
imgPadding = 300;

%% Processing
targetIndex = 46;

%% Read image
imgPath = '../images/original/'+string(images{targetIndex});
[~, scaledImage, targetImage] = read_and_manipulate(imgPath, scaleFactor, @rgb2ycbcr, 2);
 
%% Find edges
cannyEdge = image_to_edge(targetImage);

vertices = [937 29; 394 634; 946 1031; 1450 328];

A = [1 1]; 
B = [1 100];
C = [60 100];
D = [30 1];
pin = ImagePoints;
pout = [A; B; C; D]; % 2xN matrix of output

%pout(2,:) = 500 - pout(2,:); %flip to agree with pin

H = fitgeotrans(vertices, pout*10, 'projective');

[Iwarp, ref] = imwarp(scaledImage, H, 'OutputView', imref2d(size([scaledImage])));


%% Show results
figure(3);
%% Show orignal image
subplot(1,1,1)
imshow(scaledImage);title("Original Image");
%% Show binary image
figure(4);
subplot(1,1,1)
imshow(Iwarp);title("Binary image Image");
